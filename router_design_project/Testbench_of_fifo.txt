module router_fifo_tb();
reg clock,resetn,soft_reset,write_enb,read_enb,lfd_state;
reg [7:0]data_in;
wire empty,full;
wire [7:0]data_out;
integer i,k;
router_fifo DUT 
(clock,resetn,write_enb,read_enb,soft_reset,data_in,lfd_state,data_out,empty,full);
always #10 clock = ~clock;
task initialize();
begin
clock=1'b0;
resetn=1'b0;
soft_reset=1'b0;
write_enb=1'b0;
read_enb=1'b0;
end
endtask
task reset();
begin
@(negedge clock)
resetn=1'b0;
@(negedge clock)
resetn=1'b1;
end
endtask
task soft_rst();
begin
@(negedge clock)
soft_reset=1'b1;
@(negedge clock)
soft_reset=1'b0;
end
endtask
task write();
reg [7:0]payload_data,parity,header;
reg[5:0]payload_len;
reg[1:0]addr;
begin
@(negedge clock)
payload_len=6'd14;
addr=2'b01;
header={payload_len,addr};
data_in=header;
lfd_state=1'b1;
write_enb = 1'b1;
for(k=0;k<payload_len; k=k+1)
begin
@(negedge clock)
lfd_state=1'b0;
payload_data= ({$random}%256);
data_in = payload_data;
end
@(negedge clock)
lfd_state=1'b0;
parity= ({$random}%256);
data_in = parity;
end
endtask
task read();
begin
@(negedge clock)
read_enb=1'b1;
write_enb=1'b0;
end
endtask
initial
begin
initialize;
reset;
soft_rst;
write;
for(i=0;i<17;i=i+1)
read;
#1000 $finish;
end
endmodule