module router_sync_tb();
reg clock,resetn,detect_add,full_0,full_1,full_2,empty_0,empty_1,empty_2,
 write_enb_reg,read_enb_0,read_enb_1,read_enb_2;
reg [1:0]data_in;
wire fifo_full,soft_reset_0,soft_reset_1,soft_reset_2,vld_out_0,vld_out_1,vld_out_2;
wire [2:0] write_enb;
router_sync DUT(clock,resetn,detect_add,write_enb_reg,read_enb_0,read_enb_1,read_enb_2,
 empty_0,empty_1,empty_2,full_0,full_1,full_2,data_in,
 vld_out_0,vld_out_1,vld_out_2,fifo_full,soft_reset_0,soft_reset_1,soft_reset_2,
 write_enb);
task initialize();
 begin
 clock=0;
 resetn=0;
 detect_add=0; 
 write_enb_reg=0;
 data_in=0;
 full_0=0;
 full_1=0; 
 full_2=0;
 read_enb_0=0;
 read_enb_1=0;
 read_enb_2=0;
 empty_0=1;
 empty_1=1;
 empty_2=1;
 end
 endtask
always #10 clock = ~clock;
task reset();
 begin
 @(negedge clock)
 resetn=1'b0;
 @(negedge clock)
 resetn=1'b1;
 end
 endtask
task inputs(input [1:0]i);
 begin
 @(negedge clock)
 data_in =i;
 end
endtask
initial
 begin
 initialize;
 reset;
 inputs(2);
detect_add=1;
 write_enb_reg=1;
 #10;
 inputs(1);
 full_0=1;
 empty_0=0;
 #10;
 #1000 $finish;
 end
endmodule