module router_reg_tb();
reg clock,resetn,pkt_valid,fifo_full,detect_add,ld_state,laf_state,full_state,lfd_state,rst_int_reg;
reg [7:0]data_in;
wire err,parity_done,low_pkt_valid;
wire [7:0]data_out;
router_reg 
DUT(clock,resetn,pkt_valid,fifo_full,detect_add,ld_state,lfd_state,laf_state,full_state,rst_int_reg,data
_in,err,parity_done,
low_pkt_valid,data_out);
//task for clock generating
initial
begin
clock=1'b0;
forever #10 clock=~clock;
end
//task for initialize
task initialize();
begin
{clock,resetn,pkt_valid,fifo_full} = 4'b0000;
{detect_add,ld_state,laf_state,full_state,lfd_state,rst_int_reg}=6'b000000;
data_in=8'b0;
end
endtask
//task for reset
task rstn();
begin
@(negedge clock)
resetn=1'b0;
@(negedge clock)
resetn=1'b1;
end
endtask
//task for data_in
task inputs(input[7:0]i);
begin
data_in = i;
end
endtask
//task for packet_1
task packet_1();
begin
@(negedge clock)
pkt_valid=1'b1;
detect_add=1'b1;
inputs(5);
@(negedge clock)
detect_add=1'b0;
lfd_state=1'b1;
inputs(5);
@(negedge clock)
lfd_state=1'b0;
ld_state=1'b1;
inputs(8);
@(negedge clock)
ld_state=1'b1;
fifo_full=1;
inputs(2);
@(negedge clock)
ld_state=1'b1;
fifo_full=0;
laf_state=1;
inputs(2);
@(negedge clock)
laf_state=0;
ld_state=1'b1;
pkt_valid=1'b0;
inputs(3);
@(negedge clock)
rst_int_reg=1'b1;
end
endtask
//call all task
initial
begin
initialize;
#10;
rstn;
packet_1;
#20;
end
initial
begin
#300 $finish;
end
endmodule