module router_sync(input 
clock,resetn,detect_add,write_enb_reg,read_enb_0,read_enb_1,read_enb_2, 
 empty_0,empty_1,empty_2,full_0,full_1,full_2,input [1:0]data_in,
 output wire vld_out_0,vld_out_1,vld_out_2,
 output reg fifo_full,soft_reset_0,soft_reset_1,soft_reset_2,
 output reg[2:0] write_enb); 
reg [1:0] temp;
reg [4:0] timer_0,timer_1,timer_2;
// latch the address 
always@(posedge clock)
 begin
 if(!resetn)
 temp<=2'b11;
 else if (detect_add)
 temp<=data_in;
 end
//write enable logic
always@(*)
 if(write_enb_reg)
 begin
 case(temp)
 2'b00: write_enb=3'b001;
 2'b01: write_enb=3'b010;
 2'b10: write_enb=3'b100;
 default:write_enb = 3'b000;
 endcase
 end
//fifo_full logic
always@(*)
 begin
 case(temp)
 2'b00: fifo_full=full_0;
 2'b01: fifo_full=full_1;
 2'b10: fifo_full=full_2;
 default: fifo_full = 1'b0;
 endcase
 end
//valid out logic
assign vld_out_0 = ~empty_0;
assign vld_out_1 = ~empty_1;
assign vld_out_2 = ~empty_2;
//soft_reset logic
always@(posedge clock)
 begin
 if(!resetn)
 begin
 soft_reset_0 <= 1'b0;
 timer_0 <= 5'b0;
 end
 else if(vld_out_0)
 begin
 if (!read_enb_0)
 begin
 if(timer_0 ==29)
 begin
 soft_reset_0 <=1;
 timer_0 <=5'b0;
 end
 else
 begin
 soft_reset_0 <=1'b0;
 timer_0 <= timer_0+ 1'b1;
 end
 end
 else
 timer_0<=5'b0;
 end
 else
 timer_0<=5'b0;
end
 
always@(posedge clock)
 begin
 if(!resetn)
 begin
 soft_reset_1 <= 1'b0;
 timer_1 <= 5'b0;
 end
 else if (vld_out_1)
 begin
 if (!read_enb_1)
 begin
 if(timer_1 ==29)
 begin
 soft_reset_1 <=1'b1;
 timer_1 <=5'b0;
 end
 else
 begin
 soft_reset_1 <=1'b0;
 timer_1 <= timer_1+1'b1;
 end
 end
 else
 timer_1<=5'b0;
 end
 else
 timer_1<=5'b0;
end
always@(posedge clock)
 begin
 if(!resetn)
 begin
 soft_reset_2 <= 0;
 timer_2 <=5'b0;
 end
 else if (vld_out_2)
 begin
 if (!read_enb_2)
 begin
 if(timer_2 ==29)
 begin
 soft_reset_2 <=1'b1;
 timer_2 <=5'b0;
 end
 else
 begin
 soft_reset_2 <=1'b0;
 timer_2 <= timer_2+1'b1;
 end
 end
 else
 timer_2<=5'b0;
 end
 else
 timer_2<=5'b0;
end
endmodule